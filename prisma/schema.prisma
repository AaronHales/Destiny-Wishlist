// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// id Int @id @default(autoincrement())
// createdAt DateTime @default(now())
// updatedAt DateTime @updatedAt

model User {
  id            Int        @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String     @unique
  password_hash String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  WishList      WishList[]
}

model WishList {
  id              Int              @id @default(autoincrement())
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          Int
  wishListWeapons wishListWeapon[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model wishListWeapon {
  id         Int       @id @default(autoincrement())
  wishList   WishList? @relation(fields: [wishListId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  wishListId Int?
  weapon     Weapon?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Weapon {
  id               Int             @id @default(autoincrement())
  name             String
  flavorText       String
  icon             String
  waterMarkIcon    String?
  weaponType       String
  rarity           String
  damageTypes      DamageType[]
  equipmentSlot    EquipmentSlot?
  baseStats        BaseStats?
  sockets          Socket[]
  wishListWeapon   wishListWeapon? @relation(fields: [wishListWeaponId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  wishListWeaponId Int?            @unique
}

model DamageType {
  id          Int     @id @default(autoincrement())
  weapon      Weapon? @relation(fields: [weaponId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  weaponId    Int?
  name        String
  description String
  icon        String
}

model EquipmentSlot {
  id          Int     @id @default(autoincrement())
  weapon      Weapon? @relation(fields: [weaponId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  weaponId    Int?    @unique
  name        String
  description String
  ammmoType   Int
}

model BaseStats {
  id       Int     @id @default(autoincrement())
  weapon   Weapon? @relation(fields: [weaponId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  weaponId Int?    @unique
  stats    Stat[]
}

model Stat {
  id          Int        @id @default(autoincrement())
  baseStats   BaseStats? @relation(fields: [baseStatsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  baseStatsId Int?
  perk        Perk?      @relation(fields: [perkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  perkId      Int?
  name        String
  description String
  value       Int
}

model Socket {
  id         Int     @id @default(autoincrement())
  weapon     Weapon? @relation(fields: [weaponId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  weaponId   Int?
  socketName String
  perks      Perk[]
}

model Perk {
  id          Int    @id @default(autoincrement())
  socket      Socket @relation(fields: [socketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  socketId    Int
  name        String
  icon        String
  description String
  stats       Stat[]
}
